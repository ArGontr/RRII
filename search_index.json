[["index.html", "Métodos Cuantitativos para Relaciones Internacionales 1 Instalación y primeros pasos con R 1.1 Windows 1.2 Instalación en Mac 1.3 ¡Lo logramos!", " Métodos Cuantitativos para Relaciones Internacionales Armando González Díaz.armando.gonzalezdi@anahuac.mx www.twitter.com/Ar_GonTr 28/09/2022 1 Instalación y primeros pasos con R Estas lineas están pensadas como apoyo para el curso Métodos cuantitativos para las ciencias sociales. Además del acercamiento a la estadística aplicada, existen una serie de habilidades que aprenderemos: el manejo del lenguaje de programación en R Una de las grandes ventajas de este programa es que es software libre y de código abierto. Para hablar con más propiedad, no es un software sino un lenguaje orientado a objetos (después veremos que es eso) diseñado por personas que utilizan fundamentalmente estadística aplicada a la investigación científica. Como todos los lenguajes, sigue evolucionando y creciendo. Justamente su filosofía open source le ha permitido crecer y convertirse en el software de análisis estadístico mas usado en ciencias sociales y uno de los más utilizados, solo después de Python. Con el tiempo, R también se volvió muy popular en entornos laborales, ya que permite crear visualizaciones, análisis de datos y reportes automáticos totalmente personalizables,intuitivos y muy atractivos visualmente. Sobre todo cuando se tiene la necesidad de utilizar bases de datos y/o metodos estadísticos fuera del alcance de hojas de cálculo como excel. Instalar R en cada sistema operativo es un poco distinto, por lo cual seguiremos instrucciones específicas de acuerdo a nuestro sistema operativo. 1.1 Windows Para quienes trabajamos en windows, esto consta de tres pasos: instalar R Descargar e instalar Rtools Descargar e instalar Rstudio 1.1.1 Descargar e instalar R vamos a su pagina web: https://www.r-project.org/ Para instalarlo sólo necesitamos descargar la versión correspondiente a nuestro sistema operativo y ejecutar el archivo instalable: La página principal tiene ya un enlace de descarga. Damos click en la última versión Nos lleva a seleccionar un servidor donde descargarlo. Podemos seleccionar cualquiera Seleccionamos windows, y después la opción base Presionamos Descargar R Ejecutamos el instalador y seguimos las instrucciones ¡El primer paso está completo! De hecho ya podemos usar R, pero para sacarle más jugo, instalaremos Rtools y Rstudio 1.1.2 Instalar Rtools Rtools es una herramienta que nos ayuda a añadir funcionalidad a R. también es de código abierto y se descarga desde su página sin necesidad de adquirir una licencia: https://cran.r-project.org/bin/windows/Rtools/ Descargamos, ejecutamos y seguimos las instrucciones Y Listo. :=) 1.1.3 Instalación de Rstudio Rstudio es un entorno de desarrollo integrado (IDE, por sus siglas en inglés) que incluye un editor de código, entre otras funciones, que hacen más fácil la interacción con R: señalan posibles errores en el código, lo hacen más legible y permite compilar reportes o publicaciones como este manual de instrucciones. Actualmente es el IDE más popular. Si bien no es software libre, es de código abierto y tiene una versión gratuita. Puede descargarse en su página (Para usasrse es necesario instalar primero R): https://www.rstudio.com/products/rstudio/download/ Seleccionamos la versión libre de escritorio Y elegimos el instalador para nuestro sistema operativo Seguimos instrucciones 1.2 Instalación en Mac En el caso de Mac tiene que instalarse (o reinstalarse) Xquartz, que es necesario para que R pueda correr. Los pasos son: Descargar e instalar Xquartz Descargar e instalar R Instalar Rstudio 1.2.1 Instalación de Xquartz En Mac tenemos que asegurarnos que tenemos XQuartz. Lo descargamos de su página https://www.xquartz.org/ e instalamos Descargamos el archivo, lo ejecutamos y seguimos instrucciones 1.2.2 Descargar e instalar R Para la instalación en Mac, debemos saber que tipo de CPU tenemos. Existen dos posibilidades: Un procesador intel, que aplica para las computadoras que fueron producidas entre 2008 y 2020 o los M1, que tienen las Mac de 2021 en adelante. Eso es importante porque de acuerdo con ello es el archivo que debemos instalar. Si no sabemos que procesador tiene nuestra mac, podemos averiguarlo yendo a la manzanita y haciendo clic en acerca de esta mac. Una vez que sabemos que procesador tenemos, vamos a su pagina web: https://www.r-project.org/ y hay que seleccionar el instalador que corresponde a nuestro tipo de procesador. descargamos y seguimos instrucciones de instalacion 1.2.3 Instalar Rstudio Nos vamos a la pagina web: https://www.rstudio.com/products/rstudio/download/ y buscamos: Descargamos, ejecutamos y seguimos instrucciones 1.3 ¡Lo logramos! Una vez tenemos ya instalado R y Rstudio, una vista rápida a la consola de Rstudio Esta es la consola de RStudio Hasta la siguiente sesión :) "],["introducción-al-manejo-de-datos-en-r.html", "2 Introducción al manejo de datos en R 2.1 Paquetes necesarios 2.2 Repaso: Operaciones básicas y primera interacción con R 2.3 Instalación y carga de paquetes. 2.4 Principales tipos de objetos: valores, vectores, matrices y data.frame 2.5 Selección de objetos dentro de una base de datos 2.6 Algunas operaciones básicas que pueden hacerse con R 2.7 Operaciones básicas 2.8 Ejercicio: 2.9 Bibliografía", " 2 Introducción al manejo de datos en R 2.1 Paquetes necesarios stringr Wickham H (2021) 2.2 Repaso: Operaciones básicas y primera interacción con R Una de las principales características de R es el uso del “objetos” como entidad básica. Éstos pueden ser números o letras individuales o bien conjuntos de númeroso letras, funciones, matrices, bases de datos, listas, etc. Poco a poco vamos a ver que son cada tipo de objeto. Estos objetos pueden ser grabados en el entorno para su uso. Por ejemplo, podemos hacer un cálculo simple y guardarlo para usarlo después. ## 1 5*5 # Podemos usar R como calculadora ## [1] 25 a &lt;- 5*5 # lo grabamos Ejemplo 1 Para grabar un objeto, pueden usarse distintos operadores. El más común es el que acabamos de ver en el ejempo de arriba, pero pueden ser también “=” o “-&gt;” ## 2 objeto &lt;- &quot;objeto&quot; objeto1=&quot;objeto1&quot; &quot;objeto2&quot;-&gt;objeto2 # Cuando grabamos un objeto podemos llamarlo después: objeto ## [1] &quot;objeto&quot; objeto1 ## [1] &quot;objeto1&quot; objeto2 ## [1] &quot;objeto2&quot; # También podemos transformarlo con una función: ## 3 toupper(objeto) # En este caso, convertir las letras minúsculas en mayúsculas ## [1] &quot;OBJETO&quot; 2.3 Instalación y carga de paquetes. Una de las cosas que hicieron tan poderoso y utilizado R, es que muchas personas diseñan conjuntos de funciones de acuerdo a sus necesidades de investigación y luego las publican. Una forma de compartir sus métodos es mediante la creación de paquetes, que se instalan como módulos y permiten hacer más cosas y/o de manera más simple. Una gran cantidad de paquetes son almacenados en el servidor de R, donde son revisados y deben cumplir ciertas condiciones para ser avalados por la comunidad. Cuando deseamos instalar paquetes utilizamos la función install.packages. Por defecto, busca en el servidor de R el paquete que necesitamos. Uno de los paquetes más utilizados es dplyr, que puede instalarse así: install.packages(&quot;dplyr&quot;) # notese que debemos escribir el nombre del paquete en comillas Después de la instalación debe cargarse el paquete, para que R reconozca que utilizaremos sus funciones. Esto se hace con la función library library(dplyr) # una vez que ya está instalado, no es necesario escribirlo entre comillas ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union Ahora bien, no todos los paquetes están en el servidor de R. Muchos los desarrollaron investigadores y los alojan en sus propios servidores, o en su pagina de github, una página con funcionalidades muy interesantes para desarrolladores que buscan compartir su trabajo. Muchos de estos paquetes sun útilies. En este caso, podemos utilizar la función install_github del paquete remotes. Para este ejemplo, instalaremos paqueteadp que fue creado por Cruz y Urdiñez (2021) como material de apoyo para aprendizaje de R. # Instalamos el paquete remotes: install.packages(&quot;remotes&quot;) # Cargamos el paquete: library(remotes) # instalamos: install_github(&quot;arcruz0/paqueteadp&quot;, upgrade=&quot;never&quot;) Una vez que tenemos instalado un paquete, ya no es necesario volverlo a instalar cada que abramos R o Rstudio. No obstante, si tendremos que llamar los paquetes con library cada que iniciemos una sesión nueva. 2.4 Principales tipos de objetos: valores, vectores, matrices y data.frame 2.4.1 vectores Un vector es básicamente una lista de objetos individuales reunidos con un orden específico y de una clase en particular. Por ejemplo, los números del uno al diez (numérico) o sus nombres (caracter): ## 4 num &lt;- 1:10 # grabamos objeto &quot;num&quot; que contiene los números del 1 al 10 num # Le pedimos a R que nos muestre el objeto num ## [1] 1 2 3 4 5 6 7 8 9 10 nombres &lt;- c(&quot;uno&quot;, &quot;dos&quot;, &quot;tres&quot;, &quot;cuatro&quot;, &quot;cinco&quot;, &quot;seis&quot;, &quot;siete&quot;, &quot;ocho&quot;, &quot;nueve&quot;, &quot;diez&quot;) nombres ## [1] &quot;uno&quot; &quot;dos&quot; &quot;tres&quot; &quot;cuatro&quot; &quot;cinco&quot; &quot;seis&quot; &quot;siete&quot; &quot;ocho&quot; ## [9] &quot;nueve&quot; &quot;diez&quot; Aquí existen dos características importantes: los miembros del grupo y el orden en que se llaman. Para referirnos a un objeto en específico, podemos hacerlo de acuerdo con su posición dentro del vector: ## 5 num[1] # esto nos muestra el primer elemento del vector num ## [1] 1 ## 6 nombres[5] # esto nos muestra el quinto elemento del objeto nombres ## [1] &quot;cinco&quot; 2.4.1.1 Vectores numéricos y vectores de caracteres Aquí conviene distinguir que el vector “num” y el vector “nombres” son objetos cualitativamente distintos: El primero es numérico. Pueden hacerse operaciones de suma, resta, multiplicación, etc. El segundo es un conjunto de palabras para nosotros, pero para R son caracteres. Con el primero se pueden hacer todo tipo de operaciones: ## 7 num*100 # multiplica cada uno de los elementos del vector por cien ## [1] 100 200 300 400 500 600 700 800 900 1000 summary(num) # medidas de tendencia central (si el vector es numérico) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 3.25 5.50 5.50 7.75 10.00 num/num # divide cada uno de los elementos del vector num entre los elementos del mismo vector (u otro de la misma longitud) ## [1] 1 1 1 1 1 1 1 1 1 1 log(num) # obtiene el logaritmo natural de cada uno de los elementos del vector ## [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101 ## [8] 2.0794415 2.1972246 2.3025851 Podemos también guardar los resultados. ## 8 resumen &lt;- summary(num) # guarda el resumen de &#39;num&#39; en el objeto &#39;resumen&#39; Con el segundo se pueden extraer algunos caracteres, reemplazar los acentos, cambiar entre mayúsculas y munúsculas, obtener el numero de caracteres (pero no operaciones matemáticas): ## 9 summary(nombres) # nótese que en este caso, el resultado es distinto. Esto es porque el objeto nombres es un vector de cadenas de caracteres ## Length Class Mode ## 10 character character ## 10 # algunas operaciones básicas con caracteres. substr(nombres,1,1) # extrae del primer caracter hasta el número que se indique (en este caso el uno) ## [1] &quot;u&quot; &quot;d&quot; &quot;t&quot; &quot;c&quot; &quot;c&quot; &quot;s&quot; &quot;s&quot; &quot;o&quot; &quot;n&quot; &quot;d&quot; #por ejemplo, poner los nombres de los números con formato título, que lleva mayúscula en la primera letra: # install.packages(&quot;stringr&quot;) library(stringr) #cargamos paquete &quot;stringr&quot;, que sirve para manipular texto nombres &lt;- str_to_title(nombres) nombres ## [1] &quot;Uno&quot; &quot;Dos&quot; &quot;Tres&quot; &quot;Cuatro&quot; &quot;Cinco&quot; &quot;Seis&quot; &quot;Siete&quot; &quot;Ocho&quot; ## [9] &quot;Nueve&quot; &quot;Diez&quot; También podemos ordenarlos. ## 11 num2 &lt;- sample(c(1:1000), 100) num2 ## [1] 717 706 621 218 226 524 615 971 750 986 8 926 17 573 55 267 886 120 ## [19] 327 972 220 625 251 135 988 919 756 318 112 825 651 399 883 352 882 968 ## [37] 224 588 595 586 847 104 510 744 314 813 356 37 88 69 592 290 158 869 ## [55] 508 320 975 434 382 901 799 680 203 151 723 11 796 953 341 577 475 722 ## [73] 255 937 684 138 896 766 261 113 263 82 337 99 386 411 788 344 328 908 ## [91] 967 394 909 987 910 355 297 480 525 191 ## 12 sort(num2, decreasing = TRUE) ## [1] 988 987 986 975 972 971 968 967 953 937 926 919 910 909 908 901 896 886 ## [19] 883 882 869 847 825 813 799 796 788 766 756 750 744 723 722 717 706 684 ## [37] 680 651 625 621 615 595 592 588 586 577 573 525 524 510 508 480 475 434 ## [55] 411 399 394 386 382 356 355 352 344 341 337 328 327 320 318 314 297 290 ## [73] 267 263 261 255 251 226 224 220 218 203 191 158 151 138 135 120 113 112 ## [91] 104 99 88 82 69 55 37 17 11 8 ## 13 nombres &lt;- sort(nombres) nombres ## [1] &quot;Cinco&quot; &quot;Cuatro&quot; &quot;Diez&quot; &quot;Dos&quot; &quot;Nueve&quot; &quot;Ocho&quot; &quot;Seis&quot; &quot;Siete&quot; ## [9] &quot;Tres&quot; &quot;Uno&quot; 2.4.1.2 Vectores de tipo factor Como acabamos de ver, R ordena los caracteres alfabéticamente. Esto es un problema porque no coincide con el significado de estas palabras (los nombres de los números) Es por eso que existe otro tipo de vectores: aquellos de tipo factor, que son cadenas de caracteres que se ordenan de cierta forma en particular, y a cuyo orden esta asignada cierta jerarquía ordinal, como los nombres de los números que representan valores. ## 14 nombres &lt;- factor(nombres, levels=c(&quot;Uno&quot;,&quot;Dos&quot;,&quot;Tres&quot;,&quot;Cuatro&quot;,&quot;Cinco&quot;,&quot;Seis&quot;,&quot;Siete&quot;,&quot;Ocho&quot;,&quot;Nueve&quot;,&quot;Diez&quot; )) nombres &lt;- sort(nombres) nombres ## [1] Uno Dos Tres Cuatro Cinco Seis Siete Ocho Nueve Diez ## Levels: Uno Dos Tres Cuatro Cinco Seis Siete Ocho Nueve Diez 2.4.2 Matrices Cuando tenemos distintos vectores relacionados entre sí podemos agruparlos en otros objetos, como son matrices y data frames: ## 15 m1 &lt;- matrix(1:100, 10, 10) # crear una matriz con los números del uno al cien de 10x10 m1 #mostrar la matriz ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 1 11 21 31 41 51 61 71 81 91 ## [2,] 2 12 22 32 42 52 62 72 82 92 ## [3,] 3 13 23 33 43 53 63 73 83 93 ## [4,] 4 14 24 34 44 54 64 74 84 94 ## [5,] 5 15 25 35 45 55 65 75 85 95 ## [6,] 6 16 26 36 46 56 66 76 86 96 ## [7,] 7 17 27 37 47 57 67 77 87 97 ## [8,] 8 18 28 38 48 58 68 78 88 98 ## [9,] 9 19 29 39 49 59 69 79 89 99 ## [10,] 10 20 30 40 50 60 70 80 90 100 m1%*%m1 # multiplicación de matriz ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 3355 7955 12555 17155 21755 26355 30955 35555 40155 44755 ## [2,] 3410 8110 12810 17510 22210 26910 31610 36310 41010 45710 ## [3,] 3465 8265 13065 17865 22665 27465 32265 37065 41865 46665 ## [4,] 3520 8420 13320 18220 23120 28020 32920 37820 42720 47620 ## [5,] 3575 8575 13575 18575 23575 28575 33575 38575 43575 48575 ## [6,] 3630 8730 13830 18930 24030 29130 34230 39330 44430 49530 ## [7,] 3685 8885 14085 19285 24485 29685 34885 40085 45285 50485 ## [8,] 3740 9040 14340 19640 24940 30240 35540 40840 46140 51440 ## [9,] 3795 9195 14595 19995 25395 30795 36195 41595 46995 52395 ## [10,] 3850 9350 14850 20350 25850 31350 36850 42350 47850 53350 Cada uno de los elementos que conforman la matriz pueden “llamarse” para ser utilizados como si fueran un objeto o–como en el ejemplo de la multiplicación de matrices–pueden utilizarse como un conjunto. Para llamarlos podemos hacerlo por su posición (noten las comas en las filas y columnas entre corchetes): Llamamos una columna completa: ## 16 m1[,10] ## [1] 91 92 93 94 95 96 97 98 99 100 una fila: ## 17 m1[10,] ## [1] 10 20 30 40 50 60 70 80 90 100 o un elemento en particular: ## 18 m1[10,10] ## [1] 100 2.4.3 El dataframe Un objeto parecido a la matriz, pero con la capacidad de almacenar vectores de números y caracteres es el dataframe. En él, podemos almacenar vectores de distintas cosas asociados entre sí. Por ejemplo, nuestra lista de números y sus nombres: ## 19 # Recordamos nuestros vectores: num &lt;- 1:10 nombres &lt;- c(&quot;Uno&quot;, &quot;Dos&quot;, &quot;Tres&quot;, &quot;Cuatro&quot;, &quot;Cinco&quot;, &quot;Seis&quot;, &quot;Siete&quot;, &quot;Ocho&quot;, &quot;Nueve&quot;, &quot;Diez&quot;) df &lt;- data.frame(numeros=num, nombres=nombres) df ## numeros nombres ## 1 1 Uno ## 2 2 Dos ## 3 3 Tres ## 4 4 Cuatro ## 5 5 Cinco ## 6 6 Seis ## 7 7 Siete ## 8 8 Ocho ## 9 9 Nueve ## 10 10 Diez 2.5 Selección de objetos dentro de una base de datos Podemos llamar cada objeto de la misma manera que lo hicimos con la matriz. ## 20 df[,1] ## [1] 1 2 3 4 5 6 7 8 9 10 ## 21 df[1,] ## numeros nombres ## 1 1 Uno ## 22 df[1,1] ## [1] 1 2.5.1 Teoría de conjuntos, álgebra y los lenguajes de programación La programación tiene una estructura lógica. Cuando hacemos estos filtros para seleccionar datos podemos darnos cuenta de la similitud con las operaciones básicas del álgebra de conjuntos: union, intersección, complemento. Cada círculo podemos pensarlo como un vector asociado a un objeto dataframe, o lo que es lo mismo, como una variable de una base de datos Teniendo en cuenta esto, la mayor parte del trabajo es saber seleccionar conjuntos y subconjuntos de datos de acuerdo a las características que deseemos. Aquí una lista de los principales operadores lógicos Así, cuando queremos pedir la unión de dos atributos podemos usar el operador |: ## 23 df[df$numeros==3 | df$numeros==5,] ## numeros nombres ## 3 3 Tres ## 5 5 Cinco O, alternativamente, podemos usar el operador %in%: ## 24 df[df$numeros%in%c(3,5),] ## numeros nombres ## 3 3 Tres ## 5 5 Cinco Como vimos, las órdenes que se le dan a R son cumplidas literalmente. Otro elemento adicional que debemos recalcar es el uso de parentesis que identifica los comandos de órdenes que R tiene. Siempre uqe sean coherentes, R resolverá y ejecutará comandos escritos dentro de otro comando. También los vectores que conforman el dataframe ## 25 df$nombres ## [1] &quot;Uno&quot; &quot;Dos&quot; &quot;Tres&quot; &quot;Cuatro&quot; &quot;Cinco&quot; &quot;Seis&quot; &quot;Siete&quot; &quot;Ocho&quot; ## [9] &quot;Nueve&quot; &quot;Diez&quot; df$numeros2 &lt;- seq(5,50,5) # Acá le ordenamos a R que haga una secuencua de 5 en 5 desde el 5 al 50 O seleccionar algunos atributos que cumplan ciertas características: ## 26 df[df$numeros&gt;5,&quot;numeros&quot;] ## [1] 6 7 8 9 10 df[df$numeros&gt;5,1] ## [1] 6 7 8 9 10 df[df$nombres==&quot;Uno&quot;,&quot;numeros&quot;] ## [1] 1 Los atributos pueden filtrarse por más de una característica: ## 27 df[df$numeros&gt;5 &amp; df$numeros&lt;=9 &amp; df$numeros!=7,&quot;numeros&quot;] ## [1] 6 8 9 2.6 Algunas operaciones básicas que pueden hacerse con R R tiene funciones que realizan operaciones básicas como promedios, sumas, raíces, logaritmos, desviaciones estándar, etc. Existen numerosos manuales y resumenes de las principales funciones, como esta que es muy completa y les sugiero tengan a la mano: https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf Meme para distraerse un poco 2.6.1 Importando datos con R Para una demostración rápida, haremos el archivo de nuestras calificaciones. Para ello utilizaremos un paquete llamado openxlsx. Si es la primera vez que usamos R, es muy probable que no lo tengamos instalado. Podemos instalarlo: install.packages(&quot;openxlsx&quot;) Posteriormente, cargamos el paquete: library(openxlsx) Y ahora sí, cargamos el archivo. Lo mas fácil es que esté en nuestro directorio de trabajo, para no hacer una ruta mas grande. Un directorio de trabajo es útil porque sabemos que todos los resultados que nos arroje el programa apareceran así. 2.6.1.1 Seleccionando el directorio de trabajo En una de las ventanas de RStudio, tenemos un explorador de las carpetas de nuestro equipo que nos permite ver cual es el actual directorio de trabajo y el resto de archivos de nuestra computadora. De hecho, nos conduce al explorador de archivos en windows o a finder en mac. Para utilizarlo simplemente vamos a una de las ventanas de nuestra consola de Rstudio, en la imagen la inferior derecha y seleccionamos la pestaña files. De ahí, hacemos clic en los tres puntos y nos aparece el explorador. encontramos la carpeta en donde queramos establecer nuestro entorno de trabajo y le damos “open”. Lo siguiente es establecer dicha carpeta como entorno de trabajo de R. Lo hacemos seleccionando la opcion “Set as working directory” en el icono de engrane de esa misma pestaña: Ahora sí, cargamos el archivo. Usaremos de ejemplo el archivo de calificaciones de ustedes mismos. calificaciones &lt;- read.xlsx(&quot;Calificaciones_todos.xlsx&quot;) head(calificaciones) # para mostrar las calificaciones ## Materia Calificación Semestre Sexo Área Xi-U ## 1 Pensamiento económico 7.6 1 H &lt;NA&gt; -1.4321343 ## 2 Hist Arte México I prehisp vir 9.2 1 H &lt;NA&gt; 0.1678657 ## 3 Habilidades univ com niv único 7.9 1 H &lt;NA&gt; -1.1321343 ## 4 Ser universitario 8.6 1 H &lt;NA&gt; -0.4321343 ## 5 Ideas Políticas Sociales 8.2 1 H &lt;NA&gt; -0.8321343 ## 6 Política Comparada 8.8 1 H &lt;NA&gt; -0.2321343 ## (Xi-U)^2 PROMEDIO X9 ## 1 2.05100863 9.0321342925659565 &lt;NA&gt; ## 2 0.02817890 Desv Estandar &lt;NA&gt; ## 3 1.28172806 0.79815122583555609 &lt;NA&gt; ## 4 0.18674005 Suma desviaciones &lt;NA&gt; ## 5 0.69244748 -7.6942896498621849E-12 &lt;NA&gt; ## 6 0.05388633 Suma Desviaciones al cuadrado N 2.7 Operaciones básicas #Media mean(calificaciones$Calificación) ## [1] 9.032134 # Media para hombres o para mujeres mean(calificaciones[calificaciones$Sexo==&quot;H&quot;,]$Calificación) ## [1] 8.968282 mean(calificaciones[calificaciones$Sexo==&quot;M&quot;,]$Calificación) ## [1] 9.056013 # Suma sum(calificaciones$Calificación) ## [1] 7532.8 # Varianza y Desviación estándar var(calificaciones$Calificación) ## [1] 0.6370454 sd(calificaciones$Calificación) ## [1] 0.7981512 2.8 Ejercicio: En R: Importa la base de datos de tus calificaciones. Añadele una columna de semestre antes de importarla a R. Calcula: promedio y desviación estándar de tus calificaciones. Promedio y desviación estándar para las materias que cursaste en primer semestre y las del último semestre que hayas cursado. Construye en excel intervalos de confianza al 95% y ponlos en una hoja aparte de los datos que importaste de R ¿Tus calificaciones de primer semestre son diferentes siginficativamente de las del último? 2.8.0.1 Algunos manuales, links útiles y bibliografía complementaria: Hoja resumen con principales funciones: https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf El Arte de Programar en R https://cran.r-project.org/doc/contrib/Santana_El_arte_de_programar_en_R.pdf la guía pirata de R https://bookdown.org/ndphillips/YaRrr/rrelationship.html?fbclid=IwAR3QP_IrfjGTxuObjm-ODa4iikgbdRQtxqxTKfDyc04czgGxRhtNoL3JCbo R for data science https://r4ds.had.co.nz/introduction.html#other-packages El manual de R https://cran.r-project.org/doc/manuals/R-intro.pdf?fbclid=IwAR1pkuc64J9QmPFdvWo-VLrvQE1UZrDf3bJLpraRP_ArIOqQH4QMzFPRv3g Crear pagina web con blogdown http://destio.us.es/calvo/post/como-he-creado-mi-pagina-web-personal-con-el-paquete-r-blogdown/?fbclid=IwAR2hQ7MKxG6y1rMn5m1793MY-OBTtbP9o5F4LIqQIUblqIUey7Bx2fp7cWM 2.9 Bibliografía Wickham H (2021). stringr: Simple, Consistent Wrappers for Common String Operations. http://stringr.tidyverse.org, https://github.com/tidyverse/stringr. "],["exprimiendo-una-base-de-datos-obtener-datos-útiles..html", "3 Exprimiendo una base de datos: obtener datos útiles. 3.1 Instalamos y cargamos paquete 3.2 El pipe operator %&gt;% 3.3 El binomio group_by + summarise 3.4 Creación de variables 3.5 Ejercicios: 3.6 Bibliografía", " 3 Exprimiendo una base de datos: obtener datos útiles. En este capítulo repasaremos algunas cosas al respecto de cómo comunicarnos con R. Para ello utilizaremos la base de Cruz y Urdínez (2021) 3.1 Instalamos y cargamos paquete Como ya sabemos, el paquete de Cruz y Urdínez (2021) está directo enla página de github de los autores, por lo tanto, si no lo hemos instalado, se carga de la siguiente manera: install.packages(&quot;remotes&quot;) library(remotes) install_github(&quot;arcruz0/paqueteadp&quot;) La consola nos muestra este mensaje ¿Qué hacer? Simplemente hay que responder lo que R estaba preguntando. Cuando un paquete se instala desde la fuente del fabricante, por defecto R pregunta si debemos aprovechar para de una vez actualizar los paquetes ya existentes. simplemente teníamos que situarnos en el cursor de la consola y dar enter para omitir las actualizaciones. De ahí, todo es felicidad. Cargamos los paquetes e instalamos si es necesario. recordemos que normalmente podemos utilizar la función install.packages # 1 # install.packages(tidyverse) # cargamos paquetes library(tidyverse) library(paqueteadp) library(openxlsx) # cargamos la base de datos de ejemplo aprobacion &lt;- read.xlsx(&quot;aprobacion&quot;) ls() # la función ls nos muestra lo que hay en nuestro ambiente de trabajo. ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ readr 2.1.2 ## ✔ tibble 3.1.8 ✔ purrr 0.3.4 ## ✔ tidyr 1.2.0 ✔ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() El propósito general de este capítulo es que nos familiaricemos con las principales órdenes para manipular datos cuando queremos extraer información útil. La base de datos que analizaremos consiste en niveles de aprobación neta trimestral para los presidentes de latinoamérica en el periodo 2000-2014 y fue utilizada para comparar el impacto de una crisis política por escandalos de corrupción en las presidentas respecto a los presidentes. La autora (Reyes-Housholder, 2019) publicó un artículo con sus hallazgos: Un escándalo impactaba más en las presidentas que en los presidentes. Al decir que la base de datos es trimestral, nos referimos a que cada renglón es un trimestre de un año para un presidente en particular. La fuente de datos principal es el latinbarómetro, una organización din fines de lucro que genera datos de opinión sobre la aprobación presidencial de los países de latinoamérica. 3.2 El pipe operator %&gt;% Como primer ejemplo, vamos a calcular el promedio de la aprobación neta si el presidente era hombre o mujer. Primero repasamos cómo calcular un promedio, y luego podemos filtrar el promedio de los datos que corresponden a presidentes hombres y presidentes mujeres: # el comando mean sirve para calcular promedios: mean(aprobacion$aprobacion_neta) ## [1] 15.28124 # el promedio de la aprobación de todos los presidentes # ahora la aprobación para las presidentas: mean(aprobacion[aprobacion$presidente_genero==&quot;Femenino&quot;,]$aprobacion_neta) ## [1] 8.931643 # Y para los presidentes: mean(aprobacion[aprobacion$presidente_genero==&quot;Masculino&quot;,]$aprobacion_neta) ## [1] 15.95615 Vemos que el promedio de aprobación para los presidentes y las presidentas ya es revelador: es mayor para los varones que para las mujeres. En este caso, solamente tenemos que correr una función para cada género, aunque para calcular la media para una variable que se divida en 7 categorías, entonces tendríamos que hacer 7 líneas de código. Por eso lo vamos a hacer de una forma alternativa, utilizando la combinación de funciones group_by + summarise: # ## Primero obtenemos la media: aprobacion %&gt;% summarise(promedio=mean(aprobacion_neta)) # # A tibble: 1 x 1 # # promedio # # &lt;dbl&gt; # # 1 15.3 # Si queremos por genero usamos también group_by aprobacion %&gt;% group_by(presidente_genero) %&gt;% summarise(promedio=mean(aprobacion_neta)) # # # A tibble: 2 x 2 # # presidente_genero promedio # # &lt;chr&gt; &lt;dbl&gt; # # 1 Femenino 8.93 # # 2 Masculino 16.0 Inmediatamente vemos algunas cosas que no son tan fáciles de reconocer, como el símbolo %&gt;%. Este se llama operador pipe y facilita la lectura del código y manipulación de datos. 3.3 El binomio group_by + summarise Para verificar la utilidad de la combinación group_by + summarise, probamos una categoría mas amplia, calcularemos la aprobación promedio para cada presidente. Primero lo haremos con la sintaxis tradicional de R base. De la misma manera que lo hicimos para las y los presidentes, tendríamos que calcular la media de aprobación para cada presidente: unique(aprobacion$presidente) ## para ver como estan escritos los presidentes y ver su base de datos ## [1] &quot;Fernando de la Rúa&quot; ## [2] &quot;Eduardo Alberto Duhalde&quot; ## [3] &quot;Néstor Carlos Kirchner&quot; ## [4] &quot;Cristina Fernández de Kirchner&quot; ## [5] &quot;Hugo Banzer .... y 65 presidentes más! mean(aprobacion[aprobacion$presidente==&quot;Fernando de la Rúa&quot;,]$aprobacion_neta) ## [1] -0.9238752 # Y tendríamos que hacer esto 69 veces más!! Por suerte, tenemos una alternativa: la combinación group_by + summarise. Con estos comandos del paquete dplyr tenemos esas órdenes con mucho menos líneas. En esta forma, se escribe menos (algo que se agradece cuando se tienen que programar codigos enormes) y podemos sacar muchos cálculos, no solo la media. Para obtener los datos de la aprobación promedio de los presidentes, el código sería el siguiente: aprobacion %&gt;% group_by(presidente) %&gt;% summarise(mean(aprobacion_neta)) ## # A tibble: 70 × 2 ## presidente `mean(aprobacion_neta)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 Abel Pacheco 16.5 ## 2 Alan García -19.3 ## 3 Alberto Fujimori -27.3 ## 4 Alejandro Toledo -47.6 ## 5 Alfonso Portillo -20.2 ## 6 Alfredo Palacio 14.8 ## 7 Álvaro Colom 15.1 ## 8 Álvaro Uribe 46.1 ## 9 Andrés Pastrana -23.4 ## 10 Arnoldo Alemán 1.29 ## # … with 60 more rows ## # ℹ Use `print(n = ...)` to see more rows Esto tiene la ventaja además de que nos puede crear una tabla con el promedio de aprobación por presidente, su género y país donde gobiernan, en este punto incluso podemos guardar esta tabla para usarla después: aprobacion_media_presidente &lt;- aprobacion %&gt;% group_by(pais, presidente, presidente_genero) %&gt;% summarise(mean(aprobacion_neta)) ## `summarise()` has grouped output by &#39;pais&#39;, &#39;presidente&#39;. You can override ## using the `.groups` argument. aprobacion_media_presidente ## # A tibble: 70 × 4 ## # Groups: pais, presidente [70] ## pais presidente presidente_genero mean(aprobacion_…¹ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Argentina Cristina Fernández de Kirchner Femenino 8.98 ## 2 Argentina Eduardo Alberto Duhalde Masculino -6.69 ## 3 Argentina Fernando de la Rúa Masculino -0.924 ## 4 Argentina Néstor Carlos Kirchner Masculino 44.3 ## 5 Bolivia Carlos Mesa Masculino 4.43 ## 6 Bolivia Eduardo Rodríguez Veltzé Masculino 27.5 ## 7 Bolivia Evo Morales Masculino 22.3 ## 8 Bolivia Gonzalo Sánchez de Lozada Masculino -10.2 ## 9 Bolivia Hugo Banzer Masculino -17.2 ## 10 Bolivia Jorge Quiroga Ramírez Masculino -14.2 ## # … with 60 more rows, and abbreviated variable name ¹​`mean(aprobacion_neta)` ## # ℹ Use `print(n = ...)` to see more rows Nótese que en los nombres de las variables, la aprobación promedio aparece con el nombre de la función que usamos sobre la variable aprobacion_neta con mean(aprobacion_neta). Esto se logra poniendole el nombre que consideremos más conveniente dentro del comando summarise de esta manera: aprobacion_media_presidente &lt;- aprobacion %&gt;% group_by(pais, presidente, presidente_genero) %&gt;% summarise(aprobacion_media=mean(aprobacion_neta)) ## `summarise()` has grouped output by &#39;pais&#39;, &#39;presidente&#39;. You can override ## using the `.groups` argument. aprobacion_media_presidente ## # A tibble: 70 × 4 ## # Groups: pais, presidente [70] ## pais presidente presidente_genero aprobacion_media ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Argentina Cristina Fernández de Kirchner Femenino 8.98 ## 2 Argentina Eduardo Alberto Duhalde Masculino -6.69 ## 3 Argentina Fernando de la Rúa Masculino -0.924 ## 4 Argentina Néstor Carlos Kirchner Masculino 44.3 ## 5 Bolivia Carlos Mesa Masculino 4.43 ## 6 Bolivia Eduardo Rodríguez Veltzé Masculino 27.5 ## 7 Bolivia Evo Morales Masculino 22.3 ## 8 Bolivia Gonzalo Sánchez de Lozada Masculino -10.2 ## 9 Bolivia Hugo Banzer Masculino -17.2 ## 10 Bolivia Jorge Quiroga Ramírez Masculino -14.2 ## # … with 60 more rows ## # ℹ Use `print(n = ...)` to see more rows Pero además, tenemos la opción de obtener una tabla resumen de más de una variable. En este caso, podemos recuperar también el año de inicio y de término de su gestión, así como variables como corrupción, desempleo, entre otras. El límite es la información de la base de datos. Aprovecharemos para primero renombrar unas variables mal codificadas. Cuando analicemos datos directamente de sus fuentes, será muy comun tener que corregir algunos errores y en generar limpiar la base de datos antes de poder utilizarla: aprobacion %&gt;% group_by(pais, presidente, presidente_genero) %&gt;% summarise(desempleo_promedio=mean(desempleo), corrupcion_promedio=mean(corrupcion), aprobacion_promedio=mean(aprobacion_neta), anio_inicio=min(anio), anio_termino=max(anio) ) ## `summarise()` has grouped output by &#39;pais&#39;, &#39;presidente&#39;. You can override ## using the `.groups` argument. ## # A tibble: 70 × 8 ## # Groups: pais, presidente [70] ## pais presidente presi…¹ desem…² corru…³ aprob…⁴ anio_…⁵ anio_…⁶ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina Cristina Fernández… Femeni… 7.56 51.7 8.98 2008 2014 ## 2 Argentina Eduardo Alberto Du… Mascul… 18.2 33.4 -6.69 2002 2003 ## 3 Argentina Fernando de la Rúa Mascul… 16.6 14.0 -0.924 2000 2001 ## 4 Argentina Néstor Carlos Kirc… Mascul… 11.4 50.1 44.3 2003 2007 ## 5 Bolivia Carlos Mesa Mascul… 4.60 52.0 4.43 2003 2005 ## 6 Bolivia Eduardo Rodríguez … Mascul… 5.08 38.1 27.5 2005 2005 ## 7 Bolivia Evo Morales Mascul… 2.89 39.3 22.3 2006 2014 ## 8 Bolivia Gonzalo Sánchez de… Mascul… 5.07 60.5 -10.2 2002 2003 ## 9 Bolivia Hugo Banzer Mascul… 4.78 60.5 -17.2 2000 2001 ## 10 Bolivia Jorge Quiroga Ramí… Mascul… 5.40 60.5 -14.2 2001 2002 ## # … with 60 more rows, and abbreviated variable names ¹​presidente_genero, ## # ²​desempleo_promedio, ³​corrupcion_promedio, ⁴​aprobacion_promedio, ## # ⁵​anio_inicio, ⁶​anio_termino ## # ℹ Use `print(n = ...)` to see more rows Ya tenemos un resultado muy útil como resumen, pero para hacerlo más legible convendría que estuviera ordenado de una manera distinta. Lo vamos a ordenar de mayor a menor aprobación: aprobacion %&gt;% group_by(pais, presidente, presidente_genero) %&gt;% summarise(desempleo_promedio=mean(desempleo), corrupcion_promedio=mean(corrupcion), aprobacion_promedio=mean(aprobacion_neta), anio_inicio=min(anio), anio_termino=max(anio) ) %&gt;% ungroup %&gt;% arrange(aprobacion_promedio) ## `summarise()` has grouped output by &#39;pais&#39;, &#39;presidente&#39;. You can override ## using the `.groups` argument. ## # A tibble: 70 × 8 ## pais presidente presi…¹ desem…² corru…³ aprob…⁴ anio_…⁵ anio_…⁶ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Perú Alejandro Toledo Mascul… 5.10 36.6 -47.6 2001 2006 ## 2 Perú Alberto Fujimori Mascul… 5.76 12.0 -27.3 2000 2000 ## 3 Colombia Andrés Pastrana Mascul… 17.4 40.0 -23.4 2000 2002 ## 4 Guatemala Alfonso Portillo Mascul… 2.31 74.7 -20.2 2000 2003 ## 5 Paraguay Luis Ángel González Mascul… 8.00 77.5 -19.5 2000 2003 ## 6 Perú Alan García Mascul… 3.90 38.5 -19.3 2006 2011 ## 7 Venezuela Nicolás Maduro Mascul… 7.20 94.4 -18.8 2013 2014 ## 8 Bolivia Hugo Banzer Mascul… 4.78 60.5 -17.2 2000 2001 ## 9 Chile Sebastián Piñera E… Mascul… 7.00 4.05 -15.7 2010 2014 ## 10 Venezuela Hugo Chávez Mascul… 10.7 87.3 -14.3 2000 2013 ## # … with 60 more rows, and abbreviated variable names ¹​presidente_genero, ## # ²​desempleo_promedio, ³​corrupcion_promedio, ⁴​aprobacion_promedio, ## # ⁵​anio_inicio, ⁶​anio_termino ## # ℹ Use `print(n = ...)` to see more rows Ahora intentemos la aprobación para los presidentes de México: aprobacion %&gt;% filter(pais==&quot;México&quot;) %&gt;% group_by(presidente) %&gt;% summarise(promedio=mean(aprobacion_neta)) ## # A tibble: 4 × 2 ## presidente promedio ## &lt;chr&gt; &lt;dbl&gt; ## 1 Enrique Peña Nieto 15.7 ## 2 Ernesto Zedillo 40.5 ## 3 Felipe Calderón 30.7 ## 4 Vicente Fox 29.6 3.4 Creación de variables 3.4.1 R base En algunos casos, antes de calcular resumenes como los que obtuvimos por medio de group_by + summarise necesitamos crear variables en la misma unidad de análisis de la base de datos, en este caso, trimestre-año-país-presidente. Presentamos primero la forma de hacerlo en r base, con el cálculo del PIB per cápita y el logaritmo natural del PIB: # Logaritmo natural del PIB aprobacion$log_pib &lt;- log(aprobacion$pib) head(aprobacion$log_pib) ## [1] 27.03709 27.03709 27.03709 27.03709 26.99200 26.99200 # PIB per cápita # cuando creamos una variable, debemos &#39;bautizarla&#39; del lado izquierdo de la flechita podemos elegir el nombre que más nos convenga, pero del lado derecho si necesitamos llamar las variables que ya estan dentro de la base de datos. aprobacion$pib_per_capita &lt;- aprobacion$poblacion/aprobacion$pib head(aprobacion$pib_per_capita) ## [1] 6.711468e-05 6.711468e-05 6.711468e-05 6.711468e-05 7.099462e-05 ## [6] 7.099462e-05 Como puede verse, tiene que llamarse la base de datos junto con su respectiva variable cada que queremos llamar un componente, aunque sea la misma base de datos. Estas operaciones se pueden simplificar utilizando mutate: ### mutate aprobacion &lt;- aprobacion %&gt;% mutate(log_pib=log(pib), pib_per_capita = pib / poblacion ) aprobacion ## # A tibble: 1,020 × 13 ## pais anio trime…¹ presi…² presi…³ aprob…⁴ corru…⁵ pib pobla…⁶ desem…⁷ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argent… 2000 1 Fernan… Mascul… 40.1 14.0 5.52e11 3.71e7 15 ## 2 Argent… 2000 2 Fernan… Mascul… 16.4 14.0 5.52e11 3.71e7 15 ## 3 Argent… 2000 3 Fernan… Mascul… 24.0 14.0 5.52e11 3.71e7 15 ## 4 Argent… 2000 4 Fernan… Mascul… -18.3 14.0 5.52e11 3.71e7 15 ## 5 Argent… 2001 1 Fernan… Mascul… -6.97 14.0 5.28e11 3.75e7 18.3 ## 6 Argent… 2001 2 Fernan… Mascul… -20.1 14.0 5.28e11 3.75e7 18.3 ## 7 Argent… 2001 3 Fernan… Mascul… -19.4 14.0 5.28e11 3.75e7 18.3 ## 8 Argent… 2001 4 Fernan… Mascul… -23.2 14.0 5.28e11 3.75e7 18.3 ## 9 Argent… 2002 1 Eduard… Mascul… -2.01 25.0 4.70e11 3.79e7 17.9 ## 10 Argent… 2002 2 Eduard… Mascul… -20.1 25.0 4.70e11 3.79e7 17.9 ## # … with 1,010 more rows, 3 more variables: crecimiento_pib &lt;dbl&gt;, ## # log_pib &lt;dbl&gt;, pib_per_capita &lt;dbl&gt;, and abbreviated variable names ## # ¹​trimestre, ²​presidente, ³​presidente_genero, ⁴​aprobacion_neta, ⁵​corrupcion, ## # ⁶​poblacion, ⁷​desempleo ## # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names 3.4.2 group_by + mutate A veces necesitamos calcular una variable agrupada pero en vez de presentarla en una tabla como resumen, que nos aparezca en cada renglón. Pensemos que queremos calcular la diferencia entre la aprobación media de un presidente y su aprobacion en cada trimestre, lo cual nos daría una idea más clara de la fluctuacion de su aprobación en relación con su periodo completo. Entonces tendríamos que hacer: # calculamos la aprobacion por presidente aprobacion_presidente &lt;- aprobacion %&gt;% group_by(presidente) %&gt;% summarise(aprobacion_media=mean(aprobacion_neta)) # unimos este resultado a nuestra base de datos aprobacion con el comando left join aprobacion &lt;- left_join(aprobacion, aprobacion_presidente, by=&quot;presidente&quot;) # calculamos la diferencia respecto a la media aprobacion %&gt;% mutate(diferencia_aprobacion=aprobacion_media-aprobacion_neta) ## # A tibble: 1,020 × 15 ## pais anio trime…¹ presi…² presi…³ aprob…⁴ corru…⁵ pib pobla…⁶ desem…⁷ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argent… 2000 1 Fernan… Mascul… 40.1 14.0 5.52e11 3.71e7 15 ## 2 Argent… 2000 2 Fernan… Mascul… 16.4 14.0 5.52e11 3.71e7 15 ## 3 Argent… 2000 3 Fernan… Mascul… 24.0 14.0 5.52e11 3.71e7 15 ## 4 Argent… 2000 4 Fernan… Mascul… -18.3 14.0 5.52e11 3.71e7 15 ## 5 Argent… 2001 1 Fernan… Mascul… -6.97 14.0 5.28e11 3.75e7 18.3 ## 6 Argent… 2001 2 Fernan… Mascul… -20.1 14.0 5.28e11 3.75e7 18.3 ## 7 Argent… 2001 3 Fernan… Mascul… -19.4 14.0 5.28e11 3.75e7 18.3 ## 8 Argent… 2001 4 Fernan… Mascul… -23.2 14.0 5.28e11 3.75e7 18.3 ## 9 Argent… 2002 1 Eduard… Mascul… -2.01 25.0 4.70e11 3.79e7 17.9 ## 10 Argent… 2002 2 Eduard… Mascul… -20.1 25.0 4.70e11 3.79e7 17.9 ## # … with 1,010 more rows, 5 more variables: crecimiento_pib &lt;dbl&gt;, ## # log_pib &lt;dbl&gt;, pib_per_capita &lt;dbl&gt;, aprobacion_media &lt;dbl&gt;, ## # diferencia_aprobacion &lt;dbl&gt;, and abbreviated variable names ¹​trimestre, ## # ²​presidente, ³​presidente_genero, ⁴​aprobacion_neta, ⁵​corrupcion, ⁶​poblacion, ## # ⁷​desempleo ## # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names Todas estas operaciones pueden hacerse con la dupla de comandos group_by + mutate de una manera más rapida y sencilla: aprobacion %&gt;% group_by(presidente) %&gt;% mutate(aprobacion_media=mean(aprobacion_neta), diferencia=aprobacion_media-aprobacion_neta) ## # A tibble: 1,020 × 15 ## # Groups: presidente [70] ## pais anio trime…¹ presi…² presi…³ aprob…⁴ corru…⁵ pib pobla…⁶ desem…⁷ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argent… 2000 1 Fernan… Mascul… 40.1 14.0 5.52e11 3.71e7 15 ## 2 Argent… 2000 2 Fernan… Mascul… 16.4 14.0 5.52e11 3.71e7 15 ## 3 Argent… 2000 3 Fernan… Mascul… 24.0 14.0 5.52e11 3.71e7 15 ## 4 Argent… 2000 4 Fernan… Mascul… -18.3 14.0 5.52e11 3.71e7 15 ## 5 Argent… 2001 1 Fernan… Mascul… -6.97 14.0 5.28e11 3.75e7 18.3 ## 6 Argent… 2001 2 Fernan… Mascul… -20.1 14.0 5.28e11 3.75e7 18.3 ## 7 Argent… 2001 3 Fernan… Mascul… -19.4 14.0 5.28e11 3.75e7 18.3 ## 8 Argent… 2001 4 Fernan… Mascul… -23.2 14.0 5.28e11 3.75e7 18.3 ## 9 Argent… 2002 1 Eduard… Mascul… -2.01 25.0 4.70e11 3.79e7 17.9 ## 10 Argent… 2002 2 Eduard… Mascul… -20.1 25.0 4.70e11 3.79e7 17.9 ## # … with 1,010 more rows, 5 more variables: crecimiento_pib &lt;dbl&gt;, ## # log_pib &lt;dbl&gt;, pib_per_capita &lt;dbl&gt;, aprobacion_media &lt;dbl&gt;, ## # diferencia &lt;dbl&gt;, and abbreviated variable names ¹​trimestre, ²​presidente, ## # ³​presidente_genero, ⁴​aprobacion_neta, ⁵​corrupcion, ⁶​poblacion, ⁷​desempleo ## # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names 3.5 Ejercicios: # Copia y pega el script en tu editor de códigos de Rstudio library(tidyverse) library(paqueteadp) ### 1. Carga la base aprobación ### 2. Crea una variable dicotómica que indique el primer trimestre de la toma de posesión de cada presidente. # Considera la función rank, con el siguiente ejemplo: set.seed(123) vector &lt;- sample(10:50, 15) %&gt;% round # esto crea una muestra de 15 números aleatorios entre el 10 y el 50, y los redondea. vector # esta es nuestra lista de 15 números rank(vector) # nos devuelve la posición del número, de menor a mayor. el 12 es el más pequeño, por lo cual tiene la posición uno, el que sigue es el 14 (posición 2...) ## [1] 10 4 3 1 14 15 6 7 8 11 2 5 12 13 9 rank(-vector) ## En este caso, el uno es para el número más grande. ## [1] 6 12 13 15 2 1 10 9 8 5 14 11 4 3 7 ### 3. Teniendo en cuenta esto, crea una variable con la posición del trimestre de mayor a menor aprobación neta para cada presidente utilizando group_by + mutate ### 4. ¿Para cuántos presidentes el trimestre inmediato a su toma de posesión fue el de mayor aprobación? ### 5. compare la aprobación durante el primer trimestre después de la toma de posesión para cada presidente y presidenta con la media de aprobación durante todo su periodo ¿Era menor o mayor? Dirías que hay un efecto de &#39;luna de miel&#39;? # pista: no necesariamente es el trimestre 1, porque algunos presidentes pueden tomar posesión a mitad del año o en otro periodo # 6. La diferencia entre la aprobación el primer trimestre de posesión y el promedio de cada presidente ¿Era menor o mayor en el caso de las mujeres? 3.6 Bibliografía Urdinez, F. and Cruz, A. (Eds.) (2021). AnalizaR Datos Políticos "],["regresión-lineal-repaso..html", "4 Regresión lineal: Repaso. 4.1 Recordamos lo que habíamos visto en clase: 4.2 Heterocedasticidad 4.3 Factor de inflación de la varianza (VIF) 4.4 Interpretacion de coeficientes", " 4 Regresión lineal: Repaso. library(texreg) library(robustbase) library(tidyverse) library(sandwich) library(lmtest) library(modelr) library(broom) library(MASS) 4.1 Recordamos lo que habíamos visto en clase: data(&quot;bienestar&quot;) bienestar_no_na &lt;- bienestar %&gt;% drop_na(gini, gasto_educ , inversion_extranjera , gasto_salud , gasto_segsocial , poblacion, dualismo_sectorial, diversidad_etnica, pib, tipo_regimen, bal_legislativo) model_2 &lt;- lm(gini ~ 1 + gasto_educ + inversion_extranjera + gasto_salud + gasto_segsocial + poblacion + dualismo_sectorial + diversidad_etnica + pib + factor(tipo_regimen) + bal_legislativo, data = bienestar_no_na) screenreg(model_2) ## ## ================================= ## Model 1 ## --------------------------------- ## (Intercept) 85.94 *** ## (8.73) ## gasto_educ 1.59 *** ## (0.45) ## inversion_extranjera 0.24 ## (0.18) ## gasto_salud -0.83 ** ## (0.26) ## gasto_segsocial -0.83 *** ## (0.20) ## poblacion -0.93 *** ## (0.17) ## dualismo_sectorial -0.17 *** ## (0.03) ## diversidad_etnica 3.68 *** ## (1.04) ## pib -0.00 ** ## (0.00) ## factor(tipo_regimen)2 -2.29 ## (4.75) ## factor(tipo_regimen)3 -2.90 ## (4.70) ## factor(tipo_regimen)4 -5.14 ## (4.62) ## bal_legislativo -10.40 *** ## (2.22) ## --------------------------------- ## R^2 0.59 ## Adj. R^2 0.56 ## Num. obs. 167 ## ================================= ## *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05 4.2 Heterocedasticidad Decíamos que tenemos que asegurar que las estimaciones de los coeficientes sean válidas, para no caer en errores de comparar cosas que en realidad son incomparables. En la regresión lineal, esto consiste en que la recta formada por la ecuación efectivamente represente el comportamiento de la variable dependiente a lo largo de toda la recta. Esto quiere decir que solo una parte de nuestros datos responde al modelo, y que podrían faltar más variables para estudiar Ejemplo de heterocedasticidad Para medir y detectar esto tenemos varias herramientas. La primera herramienta que veremos es para detectar heterocedasticidad, mediante el text de Breusch-Pagan: bptest(model_2) ## ## studentized Breusch-Pagan test ## ## data: model_2 ## BP = 32.369, df = 12, p-value = 0.001213 La interpretación de este test es al revés que la de los p-values de los coeficientes: si es menor que 0.05 tenemos que hay heterocedasticidad, como es el caso de este modelo. Ante esto existen varias alternativas 4.2.1 1) Transformación de variables Si es el caso, es posible que alguna de las variables tenga una relación no lineal con la variable dependiente, por ejemplo cuadrática o exponencial. Cuando pasa esto el problema se puede resolver transformando la variable problemática. 4.2.2 2) El uso de errores estándar robustos Básicamente, esto consiste en recalcular los errores estándar para que el intervalo en el cual es más creíble que se mueve el valor real del coeficiente (no olvidemos que nuestro modelo es una estimación), tenga mas probabilidades de contener al valor real. Esto se hace de la siguiente manera: # 15 coeftest(model_2, vcov = vcovHC(model_2, type=&quot;HC1&quot;)) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 8.5936e+01 9.1360e+00 9.4063 &lt; 2.2e-16 *** ## gasto_educ 1.5850e+00 5.2276e-01 3.0321 0.0028505 ** ## inversion_extranjera 2.3823e-01 1.4281e-01 1.6682 0.0973145 . ## gasto_salud -8.3020e-01 2.2928e-01 -3.6208 0.0003980 *** ## gasto_segsocial -8.2728e-01 2.6079e-01 -3.1722 0.0018261 ** ## poblacion -9.2902e-01 2.0602e-01 -4.5093 1.282e-05 *** ## dualismo_sectorial -1.7044e-01 3.2949e-02 -5.1729 7.080e-07 *** ## diversidad_etnica 3.6796e+00 9.5722e-01 3.8440 0.0001766 *** ## pib -4.2676e-04 1.9039e-04 -2.2415 0.0264209 * ## factor(tipo_regimen)2 -2.2940e+00 1.4133e+00 -1.6231 0.1066179 ## factor(tipo_regimen)3 -2.8995e+00 1.2048e+00 -2.4067 0.0172815 * ## factor(tipo_regimen)4 -5.1357e+00 8.7755e-01 -5.8523 2.820e-08 *** ## bal_legislativo -1.0402e+01 2.3816e+00 -4.3676 2.297e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 4.3 Factor de inflación de la varianza (VIF) En la regresión multivariada, uno de los requerimentos adicionales es que las covariantes de la regresión no presentan excesiva correlación entre ellas. Esto se prueba con el factor de inflación de la varianza (VIF): # 16 library(car) ## Loading required package: carData ## ## Attaching package: &#39;car&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## some ## The following object is masked from &#39;package:dplyr&#39;: ## ## recode vif(model_2) ## GVIF Df GVIF^(1/(2*Df)) ## gasto_educ 1.831416 1 1.353298 ## inversion_extranjera 1.473459 1 1.213861 ## gasto_salud 1.753385 1 1.324155 ## gasto_segsocial 4.842801 1 2.200637 ## poblacion 5.019055 1 2.240325 ## dualismo_sectorial 1.216700 1 1.103041 ## diversidad_etnica 1.944754 1 1.394544 ## pib 2.450633 1 1.565450 ## factor(tipo_regimen) 2.653868 3 1.176648 ## bal_legislativo 1.743851 1 1.320550 Podemos visualizar gráficamente como se ve: # Obtenemos los valores vif_values &lt;- vif(model_2) %&gt;% data.frame() vif_values$Variable &lt;- row.names(vif_values) # Creamos el gráfico ggplot(vif_values) + geom_bar(aes(x=GVIF, y=Variable), stat=&quot;identity&quot;, fill=&quot;darkred&quot;) + geom_vline(xintercept = c(2, 4), linetype=&quot;dashed&quot;) + theme_minimal() + labs() Las dos líneas corresponden a los límites de 2 y 4. Algunos autores sugieren que la multicolinealidad es problemática si el VIF adquiere un valor mayor de 2. Otros relajan este supuesto y sugieren que el VIF para una variable no sea mayor de 4. ¿Cómo se resuelve? Hay que eliminar la variable problemática. Esto se hace una por una y comparando las VIF de los modelos resultantes. 4.4 Interpretacion de coeficientes Para profundizar en el tipo de asociaciones en las cuales podemos dar cuenta, calcularemos un nuevo modelo mas cercano a lo que publicó Reyes-Housholder (2019) data(&quot;bienestar&quot;) # codificamos las variables: bienestar &lt;- bienestar %&gt;% mutate(tipo_regimen=case_when( tipo_regimen==4 ~ &quot;Democracia Plena&quot; , tipo_regimen==3 ~ &quot;Gobierno precario&quot; , TRUE ~ &quot;Otro&quot; )) bienestar_no_na &lt;- bienestar %&gt;% drop_na(gini, gasto_educ , inversion_extranjera , gasto_salud , gasto_segsocial , poblacion, dualismo_sectorial, diversidad_etnica, pib, tipo_regimen, bal_legislativo) model_3 &lt;- lm(gini ~ 1 + gasto_educ + inversion_extranjera + gasto_salud + gasto_segsocial + poblacion + dualismo_sectorial + diversidad_etnica + pib + factor(tipo_regimen) + bal_legislativo, data = bienestar_no_na) screenreg(model_3) ## ## ================================================= ## Model 1 ## ------------------------------------------------- ## (Intercept) 80.76 *** ## (7.40) ## gasto_educ 1.60 *** ## (0.45) ## inversion_extranjera 0.23 ## (0.18) ## gasto_salud -0.81 ** ## (0.26) ## gasto_segsocial -0.83 *** ## (0.20) ## poblacion -0.93 *** ## (0.17) ## dualismo_sectorial -0.17 *** ## (0.03) ## diversidad_etnica 3.66 *** ## (1.03) ## pib -0.00 ** ## (0.00) ## factor(tipo_regimen)Gobierno precario 2.26 * ## (1.06) ## factor(tipo_regimen)Otro 3.00 * ## (1.35) ## bal_legislativo -10.42 *** ## (2.21) ## ------------------------------------------------- ## R^2 0.59 ## Adj. R^2 0.56 ## Num. obs. 167 ## ================================================= ## *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05 Para la interpretación debemos tener en cuenta varias cosas: La capacidad explicativa del modelo en su conjunto, los coeficientes de las variables independientes–que explican la relación de cada variable independiente con la variable dependiente–y su significancia estadística. 4.4.1 La R cuadrada Lo primero es la R cuadrada y la R cuadrada ajustada. Este indicador se interpreta como la proporción de la variación de la variable dependiente que es explicada por el modelo. El indicador más importante es el ajustado, ya que penaliza por el número de variables y nos ayuda a decidir si vale o no la pena la inclusión de una variable. En este caso, podemos decir que nuestro modelo explica el 56% de la variación del coeficiente de Gini entre países y periodos. 4.4.2 Los coeficientes de las variables independientes. Antes de Avanzar en la interpretación, debemos advertir de ser cuidadosos. Siempre debemos verificar primero que los coeficientes sean estadísticamente significativos antes de interpretar. Como vimos, los coeficientes son una estimación del efecto que pensamos debe tener una variable independiente sobre otra, la dependiente. Para poder verificar esa relación se construyen intervalos de confianza en torno a este estimador, para calcular que tan legos es probable que caiga nuestro estimador del verdadero valor. Esto es, se asocia un error estándar al coeficiente. Siguiendo la tradicion estadística, la probabilidad de que el valor real caiga muy alejado de nuestro estimador se mide a partir de este error estándar: 1.96 veces el error estándar es considerado un intervalo de variación a cada extremo dentro del cual es probable con un 95% de confianza que caiga el valor real. En otras palabras, debemos cuidar que el rango dentro del cual podría ubicarse el valor real de nuestro estimador, no exista una posibilidad razonable de que en realidad sea la contraria a la que predice nuestro modelo. Los paquetes estadísticos modernos marcan esto con asteriscos: Tres asteriscos cuando la significancia estadística es al 99.9%, dos cuando es al 99% y uno cuando es al 95%. En otras palabras, si el coeficiente no tiene al menos un asterisco al lado es que el margen de error es demasiado grande para poder asegurar que ese sea el comportamiento real de la variable. De hecho, cuando no tiene ningún asterisco, la interpretación correcta de un coeficiente es que no es estadisticamente significativo y por tanto no se pueden hacer aseveraciones respecto a una posible relación entre la variable independiente y la dependiente. En este caso, la inversión extranjera directa no tiene una relación estadísticamente significativa con el coeficiente de Gini Una vez aclarado esto, avanzamos en la interpretación de los coeficientes. Aunque el sentido de la interpretación es parecido, debemos dividir la interpretación en dos: variables cuantitativas y variables cualitativas. 4.4.2.1 Variables cuantitativas En el caso de las variables numéricas, la interpretación es: ante un cambio de una unidad de la variable independiente, la variable dependiente cambiará en lo que indica su coeficiente, siempre que los demás factores se mantengan constantes. Haremos el ejemplo con el gasto en salud. Por cada unidad que aumente el porcentaje del PIB gastado en salud, el coeficiente de Gini disminuye (si hubiese signo positivo aumenta), en promedio, en 0.81 puntos si el resto de los factores permanecen inalterados. Esta relación es estadísticamente significativa al 95% 4.4.2.2 Variables cualitativas Aunque la interpretación es parecida, cabe mencionar que en este tipo de variables no podemos hablar del “aumento en una unidad”, sino de la presencia o no de características distintas a la categoría de referencia del modelo. En el caso de nuestro último modelo, una variable cualitativa es el tipo de régimen, que se divide en democracia, gobierno precario y otro. Cuando metemos una variable cualitativa en un modelo de regresión, el modelo toma una categoría como la referencia, y estima un efecto específico (si es mayor o menor) para las otras. En el caso de nuestro ejemplo, la categoría de referencia es la democracia. Esto lo sabemos porque no aparece en el modelo. Ahora sí, vamos con un ejemplo: Los países que tienen un gobierno precario presentan, en promedio, un coeficiente de Gini en 2.26 puntos respecto a los que tienen un gobierno democrático, con una significancia estadística de 95% ¿Cual sería el efecto de tener otro tipo de régimen? 4.4.2.3 Interacciones Existe una particularidad: las interacciones. Esto es el término que se usa para referirse a dos variables independientes que actúan juntas con la variable dependiente. En los modelos de regresión podemos especificarlas de manera muy sencilla, utilizando un signo de multiplicación en lugar de un mas entre las variables que queremos interactuar. model_4 &lt;- lm(gini ~ 1 + inversion_extranjera + gasto_salud + gasto_segsocial + poblacion + dualismo_sectorial + diversidad_etnica + pib + factor(tipo_regimen)*gasto_educ + bal_legislativo, data = bienestar_no_na) screenreg(list(model_3, model_4)) ## ## ======================================================================== ## Model 1 Model 2 ## ------------------------------------------------------------------------ ## (Intercept) 80.76 *** 82.17 *** ## (7.40) (8.39) ## gasto_educ 1.60 *** 1.78 ** ## (0.45) (0.60) ## inversion_extranjera 0.23 0.23 ## (0.18) (0.18) ## gasto_salud -0.81 ** -0.65 * ## (0.26) (0.25) ## gasto_segsocial -0.83 *** -0.96 *** ## (0.20) (0.22) ## poblacion -0.93 *** -0.99 *** ## (0.17) (0.17) ## dualismo_sectorial -0.17 *** -0.15 *** ## (0.03) (0.03) ## diversidad_etnica 3.66 *** 4.18 *** ## (1.03) (1.01) ## pib -0.00 ** -0.00 ** ## (0.00) (0.00) ## factor(tipo_regimen)Gobierno precario 2.26 * 8.40 * ## (1.06) (3.37) ## factor(tipo_regimen)Otro 3.00 * -7.46 ## (1.35) (4.98) ## bal_legislativo -10.42 *** -9.76 *** ## (2.21) (2.13) ## factor(tipo_regimen)Gobierno precario:gasto_educ -1.66 * ## (0.80) ## factor(tipo_regimen)Otro:gasto_educ 3.18 * ## (1.38) ## ------------------------------------------------------------------------ ## R^2 0.59 0.63 ## Adj. R^2 0.56 0.60 ## Num. obs. 167 167 ## ======================================================================== ## *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05 4.4.3 Ejercicio: interpretar los resultados de esta regresión Fuente; Reyes-Housholder (2019) 4.4.4 Bibliografía Reyes-Housholder, C. (2019). A Theory of Gender’s Role on Presidential Approval Ratings in Corrupt Times. Political Research Quarterly. "],["regresión-logística.html", "5 Regresión logística 5.1 Importar la base de datos 5.2 Descripción de la base 5.3 Limpieza de bases de datos 5.4 ¿Para qué sirve este modelo?", " 5 Regresión logística Una de las herramientas mas comunes y útiles en el análisis de datos es la regresión logística. Esta se utiliza cuando se intenta predecir el resultado de una variable cardiotónico, o categórica en el caso de la regresión logística multitudinaria, a partir de las probabilidades de que asuma una u otra categoría. Vamos a trabajar con una base de datos clásica, que sirve para analizar la probabilidad de sobrevivencia de los pasajeros del Titanic de acuerdo con sus características sociodemográficas: sexo, edad, si tenían esposas o hijos, si viajaban con boleto de primera, segunda o tercera clase, etc. 5.1 Importar la base de datos Para poder cargar la base de datos, lo más sencillo es situar el directorio de trabajo en la carpeta donde está el archivo. Esto puede hacerse fácilmenet con los siguientes comandos: getwd() # esto nos dice en que directorio estamos navegando setwd(&quot;ejemplo/carpetadedestino&quot;) # cambia la carpeta de trabajo Si queremos una versión interactiva de esto, podemos utilizar el panel derecho de R, en la pestaña Files aquí podemos navegar por los directorios En esa pestaña podemos buscar hasta encontrar la carpeta donde queramos establecer nuestro directorio de trabajo. Cuando querramos importar archivos que tengamos en un .csv o un .xlsx, será muy útilo tener los archivos que queremos importar en el directorio de trabajo de R. A continuación, cargaremos la base de datos: # Cargamos base de datos titanic &lt;- read.csv(&#39;train.csv&#39;,header=T,na.strings=c(&quot;&quot;)) 5.2 Descripción de la base #tabulamos la supervivencia: table(titanic$Survived) ## ## 0 1 ## 549 342 table(titanic$Survived, titanic$Sex) ## ## female male ## 0 81 468 ## 1 233 109 Como vemos, la mayoría de los pasajeros no sobrevivió. Meme para distracción Vistazo rápido a las variables. # Convertimos la variable sexo en factores: titanic &lt;- titanic %&gt;% mutate(Sex=factor(Sex, levels = c(&quot;female&quot;, &quot;male&quot;))) ## PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked ## 1 1 0 3 Braund, Mr. Owen Harris male 22 1 0 A/5 21171 7.2500 &lt;NA&gt; S ## 2 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female 38 1 0 PC 17599 71.2833 C85 C ## 3 3 1 3 Heikkinen, Miss. Laina female 26 0 0 STON/O2. 3101282 7.9250 &lt;NA&gt; S ## 4 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35 1 0 113803 53.1000 C123 S ## 5 5 0 3 Allen, Mr. William Henry male 35 0 0 373450 8.0500 &lt;NA&gt; S ## 6 6 0 3 Moran, Mr. James male NA 0 0 330877 8.4583 &lt;NA&gt; Q Ahora bien, ¿Qué significan estas variables? Acá tenemos el codebook: Meme para distracción 5.3 Limpieza de bases de datos Cuando trabajamos con una base de datos, normalmente es necesario checar su consistencia, si las variables fueron recabadas correctamente, etc. # Antes de estimar nuestra regresión, debemos fijarnos en la distribución de los datos # observar cuantos NA hay por columna skimr::skim(titanic) Table 5.1: Data summary Name titanic Number of rows 891 Number of columns 12 _______________________ Column type frequency: character 4 factor 1 numeric 7 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace Name 0 1.00 12 82 0 891 0 Ticket 0 1.00 3 18 0 681 0 Cabin 687 0.23 1 15 0 147 0 Embarked 2 1.00 1 1 0 3 0 Variable type: factor skim_variable n_missing complete_rate ordered n_unique top_counts Sex 0 1 FALSE 2 mal: 577, fem: 314 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist PassengerId 0 1.0 446.00 257.35 1.00 223.50 446.00 668.5 891.00 ▇▇▇▇▇ Survived 0 1.0 0.38 0.49 0.00 0.00 0.00 1.0 1.00 ▇▁▁▁▅ Pclass 0 1.0 2.31 0.84 1.00 2.00 3.00 3.0 3.00 ▃▁▃▁▇ Age 177 0.8 29.70 14.53 0.42 20.12 28.00 38.0 80.00 ▂▇▅▂▁ SibSp 0 1.0 0.52 1.10 0.00 0.00 0.00 1.0 8.00 ▇▁▁▁▁ Parch 0 1.0 0.38 0.81 0.00 0.00 0.00 0.0 6.00 ▇▁▁▁▁ Fare 0 1.0 32.20 49.69 0.00 7.91 14.45 31.0 512.33 ▇▁▁▁▁ ## Otra forma de checar el porcentaje de missing values. #install.packages(&quot;naniar&quot;) library(naniar) gg_miss_fct(x = titanic, fct = Pclass) ## Para estimar un modelo de este tipo se necesita especificar las variables categóricas como factor: titanic$Pclass &lt;- factor(titanic$Pclass, levels=c(1,2,3), labels=c(&quot;Primera&quot;, &quot;Segunda&quot;, &quot;Tercera&quot;)) 5.4 ¿Para qué sirve este modelo? Observemos más de cerca algunas características básicas de quienes sobrevivieron y no de acuerdo a sexo, edad y si viajaban en primera, segunda o tercera clase. Este tipo de variables son un proxy de fenómenos de mucho interés en ciencias sociales. table(titanic$Survived, titanic$Sex) %&gt;% prop.table(margin=2)*100 ## ## female male ## 0 25.79618 81.10919 ## 1 74.20382 18.89081 Como puede verse en este tabulado, el 74% de las mujeres sobrevivió, pero sólo lo hizo el 18.9% de los hombres. table(titanic$Survived, titanic$Pclass) %&gt;% prop.table(margin=2)*100 ## ## Primera Segunda Tercera ## 0 37.03704 52.71739 75.76375 ## 1 62.96296 47.28261 24.23625 Otra variable de interes es el tipo de ticket, proxy de nivel socioeconómico. Mientras el 62% de los pasajeros que viajaban en primera clase sobrevivió, solo lograron lo mismo el 47.2% de los que viajaban en segunda clase y 24.2% de los que viajaban en tercera clase. Aquí cabe resaltar algo que ya notamos: Cuando calculamos un modelo logístico nuestra variable dependiente suele asumir solo dos valores, cero y uno. En nuestro caso cero está codificada como no sobrevivió &lt;/3 y 1 como sobrevivió. Existen muchas maneras de tratar con la ausencia de datos. Por simplicidad, en este caso los eliminaremos. De manera automática, R va a excluir las observaciones con datos faltantes en alguna de las variables del modelo. No obstante, debemos asegurarnos que no sean demasiados datos con observaciones faltantes. El modelo logístico puede ser estimado con la funcion glm: # Estimamos el modelo: model &lt;- glm(Survived ~Sex+Age+Pclass+SibSp,family=binomial(link=&#39;logit&#39;),data=titanic) summary(model) ## ## Call: ## glm(formula = Survived ~ Sex + Age + Pclass + SibSp, family = binomial(link = &quot;logit&quot;), ## data = titanic) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.7876 -0.6417 -0.3864 0.6261 2.4539 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 4.334201 0.450700 9.617 &lt; 2e-16 *** ## Sexmale -2.627679 0.214771 -12.235 &lt; 2e-16 *** ## Age -0.044760 0.008225 -5.442 5.27e-08 *** ## PclassSegunda -1.414360 0.284727 -4.967 6.78e-07 *** ## PclassTercera -2.652618 0.285832 -9.280 &lt; 2e-16 *** ## SibSp -0.380190 0.121516 -3.129 0.00176 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 964.52 on 713 degrees of freedom ## Residual deviance: 636.56 on 708 degrees of freedom ## (177 observations deleted due to missingness) ## AIC: 648.56 ## ## Number of Fisher Scoring iterations: 5 Los modelos logísticos son más fáciles de leer si los coeficientes están exponenciados. ## Coeficientes exponenciados: ## Sólo los odds ratio: exp(coef(model)) ## (Intercept) Sexmale Age PclassSegunda PclassTercera ## 76.26399478 0.07224595 0.95622723 0.24308120 0.07046651 ## SibSp ## 0.68373160 # Con intervalo de confianza exp(cbind(OR = coef(model), confint(model))) ## Waiting for profiling to be done... ## OR 2.5 % 97.5 % ## (Intercept) 76.26399478 32.43168880 190.2175658 ## Sexmale 0.07224595 0.04691807 0.1090202 ## Age 0.95622723 0.94057922 0.9714474 ## PclassSegunda 0.24308120 0.13778278 0.4213293 ## PclassTercera 0.07046651 0.03963642 0.1217492 ## SibSp 0.68373160 0.53451818 0.8617659 Para darnos una idea más clara de cómo funciona y en qué contextos se interpreta lo vamos a graficar: # 20 inter &lt;- with(titanic, data.frame(Age = mean(Age, na.rm=T), SibSp = mean(SibSp, na.rm=T), Sex=factor(&quot;male&quot;), Pclass= factor(1:3, labels=c(&quot;Primera&quot;, &quot;Segunda&quot;, &quot;Tercera&quot;)))) inter$prob &lt;- predict(model, newdata = inter, type = &quot;response&quot;) pred &lt;- predict(model, newdata = inter, type = &quot;response&quot;, se=T) inter$prob &lt;- as.numeric(pred[[1]]) inter$se &lt;- as.numeric(pred[[2]]) inter2 &lt;- with(titanic, data.frame(Age = mean(Age, na.rm=T), SibSp = mean(SibSp, na.rm=T),Sex=factor(&quot;female&quot;), Pclass= factor(1:3, labels=c(&quot;Primera&quot;, &quot;Segunda&quot;, &quot;Tercera&quot;)))) inter2$prob &lt;- as.numeric(predict(model, newdata = inter2, type = &quot;response&quot;, se=T)[[1]]) inter2$se &lt;- as.numeric(predict(model, newdata = inter2, type = &quot;response&quot;, se=T)[[2]]) inter &lt;- rbind(inter, inter2) inter$ll &lt;- inter$prob-(1.96*inter$se) inter$lu &lt;- inter$prob+(1.96*inter$se) # Cambiamos etiquetas: levels(inter$Sex) &lt;- c(&quot;Hombres&quot;, &quot;Mujeres&quot;) # Gráfico g &lt;- ggplot(inter) + geom_bar(aes(x = Pclass, y = prob, fill=Pclass), stat=&quot;identity&quot;, size = 1) + scale_fill_manual(values=c(&quot;darkgreen&quot;, &quot;darkblue&quot;, &quot;darkred&quot;))+ geom_errorbar( aes(x=Pclass, ymin=ll, ymax=lu), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.5) + facet_wrap(~Sex) + labs(title=&quot;Probabilidades estimadas&quot;) + xlab(&quot;Tipo de ticket&quot;) + ylab(&quot;Probabilidad de superviviencia&quot;) + theme_minimal()+ theme(legend.position = &quot;none&quot;) g # Guardamos los datos ggsave(filename=&quot;grafico.png&quot;, plot=g, width=10, height=8, units=&quot;cm&quot;) 5.4.1 Información adicional: http://r-statistics.co/Linear-Regression.html http://r-statistics.co/Model-Selection-in-R.html https://data.princeton.edu/wws509/r/robust https://www.kaggle.com/c/titanic/data https://stats.idre.ucla.edu/other/mult-pkg/faq/general/faq-how-do-i-interpret-odds-ratios-in-logistic-regression/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
